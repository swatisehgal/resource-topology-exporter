/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"time"

	v1alpha1 "github.com/swatisehgal/resource-topology-exporter/pkg/apis/topocontroller/v1alpha1"
	scheme "github.com/swatisehgal/resource-topology-exporter/pkg/generated/clientset/versioned/scheme"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// NodeResourceTopologiesGetter has a method to return a NodeResourceTopologyInterface.
// A group's client should implement this interface.
type NodeResourceTopologiesGetter interface {
	NodeResourceTopologies(namespace string) NodeResourceTopologyInterface
}

// NodeResourceTopologyInterface has methods to work with NodeResourceTopology resources.
type NodeResourceTopologyInterface interface {
	Create(nodeResourceTopology *v1alpha1.NodeResourceTopology, opts v1.CreateOptions) (*v1alpha1.NodeResourceTopology, error)
	Update(nodeResourceTopology *v1alpha1.NodeResourceTopology, opts v1.UpdateOptions) (*v1alpha1.NodeResourceTopology, error)
	Delete(name string, opts v1.DeleteOptions) error
	DeleteCollection(opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(name string, opts v1.GetOptions) (*v1alpha1.NodeResourceTopology, error)
	List(opts v1.ListOptions) (*v1alpha1.NodeResourceTopologyList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.NodeResourceTopology, err error)
	NodeResourceTopologyExpansion
}

// nodeResourceTopologies implements NodeResourceTopologyInterface
type nodeResourceTopologies struct {
	client rest.Interface
	ns     string
}

// newNodeResourceTopologies returns a NodeResourceTopologies
func newNodeResourceTopologies(c *TopocontrollerV1alpha1Client, namespace string) *nodeResourceTopologies {
	return &nodeResourceTopologies{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the nodeResourceTopology, and returns the corresponding nodeResourceTopology object, and an error if there is any.
func (c *nodeResourceTopologies) Get(name string, options v1.GetOptions) (result *v1alpha1.NodeResourceTopology, err error) {
	result = &v1alpha1.NodeResourceTopology{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("noderesourcetopologies").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of NodeResourceTopologies that match those selectors.
func (c *nodeResourceTopologies) List(opts v1.ListOptions) (result *v1alpha1.NodeResourceTopologyList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.NodeResourceTopologyList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("noderesourcetopologies").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested nodeResourceTopologies.
func (c *nodeResourceTopologies) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("noderesourcetopologies").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a nodeResourceTopology and creates it.  Returns the server's representation of the nodeResourceTopology, and an error, if there is any.
func (c *nodeResourceTopologies) Create(nodeResourceTopology *v1alpha1.NodeResourceTopology, opts v1.CreateOptions) (result *v1alpha1.NodeResourceTopology, err error) {
	result = &v1alpha1.NodeResourceTopology{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("noderesourcetopologies").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(nodeResourceTopology).
		Do().
		Into(result)
	return
}

// Update takes the representation of a nodeResourceTopology and updates it. Returns the server's representation of the nodeResourceTopology, and an error, if there is any.
func (c *nodeResourceTopologies) Update(nodeResourceTopology *v1alpha1.NodeResourceTopology, opts v1.UpdateOptions) (result *v1alpha1.NodeResourceTopology, err error) {
	result = &v1alpha1.NodeResourceTopology{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("noderesourcetopologies").
		Name(nodeResourceTopology.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(nodeResourceTopology).
		Do().
		Into(result)
	return
}

// Delete takes name of the nodeResourceTopology and deletes it. Returns an error if one occurs.
func (c *nodeResourceTopologies) Delete(name string, opts v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("noderesourcetopologies").
		Name(name).
		Body(&opts).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *nodeResourceTopologies) DeleteCollection(opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("noderesourcetopologies").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do().
		Error()
}

// Patch applies the patch and returns the patched nodeResourceTopology.
func (c *nodeResourceTopologies) Patch(name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.NodeResourceTopology, err error) {
	result = &v1alpha1.NodeResourceTopology{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("noderesourcetopologies").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do().
		Into(result)
	return
}
